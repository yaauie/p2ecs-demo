input {
  stdin {
    codec => line
  }
}

filter {
  # ECS: remap STDIN Input Metadata
  mutate { remove_field => "[host]" }

  # ECS: rename original to avoid re-capturing `message`
  mutate {
    rename => { "message" => "[event][original]" }
  }

  if "grok_match" not in [tags] {
    grok {
      match => {
        "[event][original]" => "^%{HAPROXYHTTP}"
      }
    }
    if "_grokparsefailure" in [tags] {
      mutate {
        remove_tag => "_grokparsefailure"
      }
    } else {
      # ECS: Clean up HAPROXYHTTP captures, removing unnecessary fields
      mutate {
        add_tag => "grok_match"
        rename => {
          "actconn" => "[haproxy][connections][active]"
          "beconn"  => "[haproxy][connections][backend]"
          "retries" => "[haproxy][connections][retries]"
          "feconn"  => "[haproxy][connections][frontend]"
          "srvconn" => "[haproxy][connections][server]"

          "frontend_name"         => "[haproxy][frontend_name]"
          "server_name"           => "[haproxy][server_name]"
          "backend_queue"         => "[haproxy][backend_queue]"
          "srv_queue"             => "[haproxy][server_queue]"
          "backend_name"          => "[haproxy][backend_name]"
          "termination_state"     => "[haproxy][termination_state]"
          "time_queue"            => "[haproxy][total_waiting_time_ms]"
          "time_duration"         => "[haproxy][total_time_ms]"
          "accept_date"           => "[haproxy][request_date]"
          "time_backend_connect"  => "[haproxy][connection_wait_time_ms]"
          "time_backend_response"    => "[haproxy][http][request][time_wait_without_data_ms]"
          "captured_request_headers" => "[haproxy][http][request][captured_headers]"
          "time_request"             => "[haproxy][http][request][time_wait_ms]"
          "captured_request_cookie"  => "[haproxy][http][request][captured_cookie]"
          "captured_response_cookie" => "[haproxy][http][response][captured_cookie]"

          "program"  => "[process][name]"
          "pid" => "[process][pid]"

          "http_verb"          => "[http][request][method]"
          "http_status_code"   => "[http][response][status_code]"
          "http_version"       => "[http][version]"
          "http_request"       => "[url][path]"

          "syslog_timestamp" => "[@metadata][syslog-timestamp]"

          "bytes_read"  => "[source][bytes]"
          "client_ip"   => "[source][ip]"
          "client_port" => "[source][port]"

          "syslog_server" => "[host][hostname]"
        }

        remove_field => [
          "haproxy_time",
          "haproxy_month",
          "haproxy_year",
          "haproxy_milliseconds",
          "haproxy_second",
          "haproxy_minute",
          "haproxy_monthday",
          "haproxy_hour"
        ]
      }
      # ECS: convert number fields
      mutate {
        convert => {
          "[source][bytes]" => integer
          "[source][port]"  => integer
          "[haproxy][total_time_ms]" => integer
          "[haproxy][connections][active]"   => integer
          "[haproxy][connections][backend]"  => integer
          "[haproxy][connections][retries]"  => integer
          "[haproxy][connections][frontend]" => integer
          "[haproxy][connections][server]"   => integer

          "[haproxy][http][request][time_wait_without_data_ms]" => integer
          "[haproxy][http][request][time_wait_ms]" => integer

          "[haproxy][backend_queue]" => integer
          "[haproxy][total_waiting_time_ms]" => integer

          "[http][response][status_code]" => integer
        }
      }
    }
  }

  if "grok_match" not in [tags] {
    grok {
      match => {
        "[event][original]" => "^%{SYSLOGLINE}"
        add_tag => "grok_match"
      }
    }

    # ECS: clean up SYSLOGLINE
    if "_grokparsefailure" in [tags] {
      mutate {
        remove_tag => "_grokparsefailure"
      }
    } else {
      mutate {
        add_tag => "grok_match"
        rename => {
          "logsource" => "[host][hostname]"
          "program"   => "[process][name]"
          "pid"       => "[process][pid]"
          "timestamp" => "[@metadata][syslog-timestamp]"
        }
      }
    }
  }

  if "grok_match" in [tags] {
    mutate {
      remove_tag => "grok_match"
    }

    if [@metadata][syslog-timestamp] {
      date {
        match => ["[@metadata][syslog-timestamp]", "MMM dd HH:mm:ss", "MMM  d HH:mm:ss" ]
        target => "@timestamp"
      }
    }

    mutate {
      convert => {
        "[process][pid]" => integer
      }
    }
  } else {
    mutate {
      add_tag => "_grokparsefailure"
    }
  }
}

output {
  tcp {
    host => localhost
    port => "${DEMO_LISTEN_PORT}"
    codec => json_lines
  }
}